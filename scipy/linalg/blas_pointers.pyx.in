"""
Function pointers to BLAS functions.

BLAS Functions
==============

- caxpy
- ccopy
- cdotc
- cdotu
- cgemm
- cgemv
- cgerc
- cgeru
- chemm
- chemv
- cher
- cher2
- cher2k
- cherk
- crotg
- cscal
- csrot
- csscal
- cswap
- csymm
- csyr
- csyr2k
- csyrk
- ctrmm
- ctrmv
- dasum
- daxpy
- dcopy
- ddot
- dgemm
- dgemv
- dger
- dnrm2
- drot
- drotg
- drotm
- drotmg
- dscal
- dswap
- dsymm
- dsymv
- dsyr
- dsyr2
- dsyr2k
- dsyrk
- dtrmm
- dtrmv
- dzasum
- dznrm2
- icamax
- idamax
- isamax
- izamax
- sasum
- saxpy
- scasum
- scnrm2
- scopy
- sdot
- sgemm
- sgemv
- sger
- snrm2
- srot
- srotg
- srotm
- srotmg
- sscal
- sswap
- ssymm
- ssymv
- ssyr
- ssyr2
- ssyr2k
- ssyrk
- strmm
- strmv
- zaxpy
- zcopy
- zdotc
- zdotu
- zdrot
- zdscal
- zgemm
- zgemv
- zgerc
- zgeru
- zhemm
- zhemv
- zher
- zher2
- zher2k
- zherk
- zrotg
- zscal
- zswap
- zsymm
- zsyr
- zsyr2k
- zsyrk
- ztrmm
- ztrmv

"""

cdef extern from "fortran_defs.h":
    pass

# Use the subroutine wrappers for the
# functions with specific return values.
ctypedef int wcdotc_t(c *out, int *n, c *cx, int *incx, c *cy, int *incy) nogil
ctypedef int wcdotu_t(c *out, int *n, c *cx, int *incx, c *cy, int *incy) nogil
ctypedef int wdasum_t(d *out, int *n, d *dx, int *incx) nogil
ctypedef int wddot_t(d *out, int *n, d *dx, int *incx, d *dy, int *incy) nogil
ctypedef int wdnrm2_t(d *out, int *n, d *x, int *incx) nogil
ctypedef int wdzasum_t(d *out, int *n, z *zx, int *incx) nogil
ctypedef int wdznrm2_t(d *out, int *n, z *x, int *incx) nogil
ctypedef int wicamax_t(int *out, int *n, c *cx, int *incx) nogil
ctypedef int widamax_t(int *out, int *n, d *dx, int *incx) nogil
ctypedef int wisamax_t(int *out, int *n, s *sx, int *incx) nogil
ctypedef int wizamax_t(int *out, int *n, z *zx, int *incx) nogil
ctypedef int wsasum_t(s *out, int *n, s *sx, int *incx) nogil
ctypedef int wscasum_t(s *out, int *n, c *cx, int *incx) nogil
ctypedef int wscnrm2_t(s *out, int *n, c *x, int *incx) nogil
ctypedef int wsdot_t(s *out, int *n, s *sx, int *incx, s *sy, int *incy) nogil
ctypedef int wsnrm2_t(s *out, int *n, s *x, int *incx) nogil
ctypedef int wzdotc_t(z *out, int *n, z *zx, int *incx, z *zy, int *incy) nogil
ctypedef int wzdotu_t(z *out, int *n, z *zx, int *incx, z *zy, int *incy) nogil

{{py:

def wrap_fortran_function(signature):
    import re
    m = re.match(r'\s*([a-z]+)\s+([a-z0-9]+)\((.*)\)\s*$', signature)
    assert m
    ret_type, name, arg_sig = m.groups()
    args = re.findall(r'\*([a-z]+)', arg_sig)
    arg_list = ",".join(args)
    wname = name + "wrapper"
    return """
cdef extern w{name}_t *_fortran_{name} "F_FUNC({wname},{WNAME})"
cdef {ret_type} _wrap_{name}({arg_sig}) nogil:
    cdef {ret_type} out
    _fortran_{name}(&out, {arg_list})
    return out
cdef {name}_t *{name} = &_wrap_{name}
""".format(name=name, ret_type=ret_type, arg_sig=arg_sig, arg_list=arg_list,
           wname=wname, WNAME=wname.upper())

def wrap_fortran_subroutine(name):
    return """
cdef extern {name}_t *_fortran_{name} "F_FUNC({name},{NAME})"
cdef {name}_t *{name} = _fortran_{name}
""".format(name=name, NAME=name.upper())

WRAPPED_FUNCTIONS = [
    'c cdotc(int *n, c *cx, int *incx, c *cy, int *incy)',
    'c cdotu(int *n, c *cx, int *incx, c *cy, int *incy)',
    'd dasum(int *n, d *dx, int *incx)',
    'd ddot(int *n, d *dx, int *incx, d *dy, int *incy)',
    'd dnrm2(int *n, d *x, int *incx)',
    'd dzasum(int *n, z *zx, int *incx)',
    'd dznrm2(int *n, z *x, int *incx)',
    'int icamax(int *n, c *cx, int *incx)',
    'int idamax(int *n, d *dx, int *incx)',
    'int isamax(int *n, s *sx, int *incx)',
    'int izamax(int *n, z *zx, int *incx)',
    's sasum(int *n, s *sx, int *incx)',
    's scasum(int *n, c *cx, int *incx)',
    's scnrm2(int *n, c *x, int *incx)',
    's sdot(int *n, s *sx, int *incx, s *sy, int *incy)',
    's snrm2(int *n, s *x, int *incx)',
    'z zdotc(int *n, z *zx, int *incx, z *zy, int *incy)',
    'z zdotu(int *n, z *zx, int *incx, z *zy, int *incy)'
]

WRAPPED_SUBROUTINES = [
    'caxpy',
    'ccopy',
    'cgemm',
    'cgemv',
    'cgerc',
    'cgeru',
    'chemm',
    'chemv',
    'cher',
    'cher2',
    'cher2k',
    'cherk',
    'crotg',
    'cscal',
    'csrot',
    'csscal',
    'cswap',
    'csymm',
    'csyr',
    'csyr2k',
    'csyrk',
    'ctrmm',
    'ctrmv',
    'daxpy',
    'dcopy',
    'dgemm',
    'dgemv',
    'dger',
    'drot',
    'drotg',
    'drotm',
    'drotmg',
    'dscal',
    'dswap',
    'dsymm',
    'dsymv',
    'dsyr',
    'dsyr2',
    'dsyr2k',
    'dsyrk',
    'dtrmm',
    'dtrmv',
    'saxpy',
    'scopy',
    'sgemm',
    'sgemv',
    'sger',
    'srot',
    'srotg',
    'srotm',
    'srotmg',
    'sscal',
    'sswap',
    'ssymm',
    'ssymv',
    'ssyr',
    'ssyr2',
    'ssyr2k',
    'ssyrk',
    'strmm',
    'strmv',
    'zaxpy',
    'zcopy',
    'zdrot',
    'zdscal',
    'zgemm',
    'zgemv',
    'zgerc',
    'zgeru',
    'zhemm',
    'zhemv',
    'zher',
    'zher2',
    'zher2k',
    'zherk',
    'zrotg',
    'zscal',
    'zswap',
    'zsymm',
    'zsyr',
    'zsyr2k',
    'zsyrk',
    'ztrmm',
    'ztrmv',
]

}}

{{for sig in WRAPPED_FUNCTIONS}}
{{wrap_fortran_function(sig)}}
{{endfor}}

{{for name in WRAPPED_SUBROUTINES}}
{{wrap_fortran_subroutine(name)}}
{{endfor}}
