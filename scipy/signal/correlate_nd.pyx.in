
cimport numpy as np
np.import_array()

cdef extern from "stdlib.h":
    void free(void *)

cdef extern from "iterhelper.h":
    object NpyIter_READOBJECT(void *iter)
    void NpyIter_ASSIGNOBJECT(void *iter, object obj)

cdef extern from "sigtools.h":
    np.PyArray_CopySwapFunc ARRAY_COPYSWAP_FUNC(np.NpyArray *arr)

cdef enum:
    CORR_MODE_VALID = 0
    CORR_MODE_SAME  = 1
    CORR_MODE_FULL  = 2

def _correlateND(np.ndarray ax, np.ndarray ay, np.ndarray aout, int mode):
    cdef np.NpyArrayIterObject *itx, *ity, *itz
    cdef int st
    cdef np.dtype type

    type = np.Npy_INTERFACE_descr(np.NpyArray_DescrFromType(np.PyArray_TYPE(ax)))
    type = np.NpyArray_FindArrayType_2args(ay, type)
    type = np.NpyArray_FindArrayType_2args(aout, type)

    ax = np.PyArray_FromAny(ax, type, 0, 0, np.NPY_BEHAVED | np.NPY_ENSUREARRAY, None);
    ay = np.PyArray_FromAny(ay, type, 0, 0, np.NPY_BEHAVED | np.NPY_ENSUREARRAY, None);
    aout = np.PyArray_FromAny(aout, type, 0, 0, np.NPY_BEHAVED | np.NPY_ENSUREARRAY, None);

    if np.PyArray_NDIM(ax) != np.PyArray_NDIM(ay):
        raise ValueError("Arrays must have the same number of dimensions.")

    if np.PyArray_NDIM(ax) == 0:
        raise ValueError("Cannot convolve zero-dimensional arrays.")

    itx = np.PyArray_IterNew(ax)
    ity = np.PyArray_IterNew(ay)
    itz = np.PyArray_IterNew(aout)

    cdef int typenum = type.num

    st = _correlate_nd_imp(itx, ity, itz, typenum, mode);
    if st:
        return None

    return np.PyArray_Return(aout)


############################################################
# Implementation of the type-specific correlation 'kernels'
#
{{for fsuf, type
      in zip(['ubyte', 'byte', 'ushort', 'short', 'uint', 'int', 'ulong',
              'long', 'ulonglong', 'longlong', 'float', 'double', 'longdouble'],
             ['np.npy_ubyte', 'np.npy_byte', 'np.npy_ushort', 'short', 'np.npy_uint',
              'int', 'np.npy_ulong', 'long', 'np.npy_ulonglong', 'np.npy_longlong',
              'float', 'double', 'np.npy_longdouble'])}}
cdef int _imp_correlate_nd_{{fsuf}}(np.NpyArrayNeighborhoodIterObject *curx,
        np.NpyArrayNeighborhoodIterObject *curneighx, np.NpyArrayIterObject *ity,
        np.NpyArrayIterObject *itz):
    cdef np.npy_intp i, j
    cdef {{type}} acc

    for i in range(curx.size):
        acc = 0
        np.PyArrayNeighborhoodIter_Reset(curneighx)
        for j in range(curneighx.size):
            acc += (<{{type}}*>curneighx.dataptr)[0] * (<{{type}}*>ity.dataptr)[0]

            np.PyArrayNeighborhoodIter_Next(curneighx)
            np.PyArray_ITER_NEXT(ity)
        
        np.PyArrayNeighborhoodIter_Next(curx)

        (<{{type}}*>itz.dataptr)[0] = acc

        np.PyArray_ITER_NEXT(itz)
        np.PyArray_ITER_RESET(ity)

    return 0
{{endfor}}

{{for fsuf, type
      in zip(['float', 'double', 'longdouble'],
             ['float', 'double', 'np.npy_longdouble'])}}
cdef int _imp_correlate_nd_c{{fsuf}}(np.NpyArrayNeighborhoodIterObject *curx,
        np.NpyArrayNeighborhoodIterObject *curneighx, np.NpyArrayIterObject *ity,
        np.NpyArrayIterObject *itz):
    cdef int i, j
    cdef {{type}} racc, iacc
    cdef {{type}} *ptr1, *ptr2

    for i in range(curx.size):
        racc = 0
        iacc = 0
        np.PyArrayNeighborhoodIter_Reset(curneighx)
        for j in range(curneighx.size):
            ptr1 = <{{type}}*>curneighx.dataptr
            ptr2 = <{{type}}*>ity.dataptr
            racc += ptr1[0] * ptr2[0] + ptr1[1] * ptr2[1]
            iacc += ptr1[1] * ptr2[0] - ptr1[0] * ptr2[1]

            np.PyArrayNeighborhoodIter_Next(curneighx)
            np.PyArray_ITER_NEXT(ity)
        
        np.PyArrayNeighborhoodIter_Next(curx)

        (<{{type}}*>itz.dataptr)[0] = racc
        (<{{type}}*>itz.dataptr)[1] = iacc

        np.PyArray_ITER_NEXT(itz)
        np.PyArray_ITER_RESET(ity)

    return 0
{{endfor}}

cdef int _imp_correlate_nd_object(np.NpyArrayNeighborhoodIterObject *curx,
        np.NpyArrayNeighborhoodIterObject *curneighx, np.NpyArrayIterObject *ity,
        np.NpyArrayIterObject *itz):
    cdef int i, j
    cdef char *zero
    cdef np.PyArray_CopySwapFunc copyswap = ARRAY_COPYSWAP_FUNC(curx.ao)

    zero = <char *>np.PyArray_Zero(np.Npy_INTERFACE_array(curx.ao))

    for i in range(curx.size):
        np.PyArrayNeighborhoodIter_Reset(curneighx)
        copyswap(<void *>itz.dataptr, <void *>zero, 0, NULL)

        for j in range(curneighx.size):
            # compute tmp = acc + x * y. Not all objects supporting the
            # number protocol support inplace operations, so we do it the most
            # straightfoward way.
            tmp = NpyIter_READOBJECT(itz) + \
                  NpyIter_READOBJECT(curneighx) * NpyIter_READOBJECT(ity)
            
            NpyIter_ASSIGNOBJECT(itz, tmp)

            np.PyArrayNeighborhoodIter_Next(curneighx)
            np.PyArray_ITER_NEXT(ity)

        np.PyArrayNeighborhoodIter_Next(curx)

        np.PyArray_ITER_NEXT(itz)
        np.PyArray_ITER_RESET(ity)

    np.PyDataMem_FREE(zero)

    return 0

cdef _correlate_nd_imp(np.NpyArrayIterObject* itx, np.NpyArrayIterObject *ity,
        np.NpyArrayIterObject *itz, int typenum, int mode):
    cdef np.NpyArrayNeighborhoodIterObject *curneighx, *curx
    cdef np.npy_intp i, nz, nx
    cdef np.npy_intp bounds[np.NPY_MAXDIMS*2]

    # Compute boundaries for the neighborhood iterator curx: curx is used to
    # traverse x directly, such as each point of the output is the
    # innerproduct of y with the neighborhood around curx */
    if mode == CORR_MODE_VALID:
        # Only walk through the input points such as the correponding
        # output will not depend on 0 padding
        for i in range(np.PyArray_NDIM(np.NpyIter_ARRAY(itx))):
            bounds[2*i] = np.PyArray_DIMS(np.NpyIter_ARRAY(ity))[i] - 1
            bounds[2*i+1] = np.PyArray_DIMS(np.NpyIter_ARRAY(itx))[i] - 1
    elif mode == CORR_MODE_SAME:
        # Only walk through the input such as the output will be centered
        # relatively to the output as computed in the full mode
        for i in range(np.PyArray_NDIM(np.Npy_INTERFACE_array(itx.ao))):
            nz = np.PyArray_DIMS(np.Npy_INTERFACE_array(itx.ao))[i]
            # Recover 'original' nx, before it was zero-padded */
            nx = nz - np.PyArray_DIMS(np.Npy_INTERFACE_array(ity.ao))[i] + 1
            if (nz - nx) % 2 == 0:
                bounds[2*i] = (nz - nx) / 2
            else:
                bounds[2*i] = (nz - nx - 1) / 2
                
            bounds[2*i+1] = bounds[2*i] + nx - 1
    elif mode == CORR_MODE_FULL:
        for i in range(np.PyArray_NDIM(np.Npy_INTERFACE_array(itx.ao))):
            bounds[2*i] = 0;
            bounds[2*i+1] = np.PyArray_DIMS(np.Npy_INTERFACE_array(itx.ao))[i] - 1
    else:
        raise SystemError

    curx = np.PyArray_NeighborhoodIterNew(itx, bounds,
                                np.NPY_NEIGHBORHOOD_ITER_ZERO_PADDING, NULL, free)
    if (curx == NULL):
        raise SystemError("Could not create curx ?")

    # Compute boundaries for the neighborhood iterator: the neighborhood for x
    #   should have the same dimensions as y
    for i in range(np.PyArray_NDIM(np.Npy_INTERFACE_array(ity.ao))):
        bounds[2*i] = -np.PyArray_DIMS(np.Npy_INTERFACE_array(ity.ao))[i] + 1
        bounds[2*i+1] = 0

    curneighx = np.PyArray_NeighborhoodIterNew(<np.NpyArrayIterObject *>curx,
                        bounds, np.NPY_NEIGHBORHOOD_ITER_ZERO_PADDING, NULL, free)

    if typenum == np.NPY_OBJECT:
        # The object array case does not worth being optimized, since most of
    	# the cost is numerical operations, not iterators moving in this case ?
        _imp_correlate_nd_object(curx, curneighx, ity, itz)
{{for TYPE, type
      in zip(['UBYTE', 'BYTE', 'USHORT', 'SHORT', 'UINT', 'INT', 'ULONG',
              'LONG', 'ULONGLONG', 'LONGLONG', 'FLOAT', 'DOUBLE', 'LONGDOUBLE',
              'CFLOAT', 'CDOUBLE', 'CLONGDOUBLE'],
             ['ubyte', 'byte', 'ushort', 'short', 'uint', 'int', 'ulong',
              'long', 'ulonglong', 'longlong', 'float', 'double', 'longdouble',
              'cfloat', 'cdouble', 'clongdouble'])}}
    elif typenum == np.NPY_{{TYPE}}:
        _imp_correlate_nd_{{type}}(curx, curneighx, ity, itz)
{{endfor}}

    else:
        raise ValueError("Unsupported type")

    return 0
