# This file performs the installation step once the build is complete.
# Installation primarily involves copying the build results to the
# IronPython site-packages directory.

import os
import zipfile
from os.path import join


scipy_version = '1.0.0'


config_txt = """# this file is generated by ironsetup.py
# It contains system_info results at the time of building this package.
__all__ = ["get_info","show"]

umfpack_info={}
lapack_opt_info={'extra_link_args': []}
blas_opt_info={'extra_link_args': []}

def get_info(name):
    g = globals()
    return g.get(name, g.get(name + "_info", {}))

def show():
    for name,info_dict in globals().items():
        if name[0] == "_" or type(info_dict) is not type({}): continue
        print(name + ":")
        if not info_dict:
            print("  NOT AVAILABLE")
        for k,v in info_dict.items():
            v = str(v)
            if k == "sources" and len(v) > 200:
                v = v[:60] + " ...\\n... " + v[-60:]
            print("    %s = %s" % (k,v))
"""

version_txt = """# this file is generated by ironsetup.py
version = '%s'
release = False

if not release:
    version += ".dev"
""" % scipy_version

spec_txt = """\
metadata_version = '1.1'
name = 'scipy'
version = '%s'
build = 1

arch = 'x86'
platform = 'cli'
osdist = None
python = None
packages = [
  'numpy 2.0.0',
]
""" % scipy_version


def build_egg():
    egg_name = 'scipy-%s-1.egg' % scipy_version
    print "BUILDING %r ..." % egg_name
    z = zipfile.ZipFile(egg_name, 'w', zipfile.ZIP_DEFLATED)

    ignore_libs = ["Microsoft.Scripting.dll",
                   "Microsoft.Scripting.Metadata.dll",
                   "Microsoft.Dynamic.dll",
                   "IronPython.dll",
                   "IronPython.Modules.dll",
                   "NumpyDotNet.dll",
                   "NpyAccessLib.dll",
                   "ndarray.dll"]

    # Recursively walk the scipy tree and all files to the egg
    for root, dirs, files in os.walk("scipy"):
        for fn in files:
            path = join(root, fn)
            if fn.endswith(('.py', '.npz')):
                arcname = path.replace('\\', '/')
                if fn.endswith('_clr.py'):
                    arcname = arcname[:-7] + '.py'
                z.write(path, arcname)

            elif fn.endswith('.dll') and fn not in ignore_libs:
                print path
                z.write(path, 'EGG-INFO/prefix/DLLs/' + fn)

    for fn in ('libiomp5md.dll', 'libifcoremd.dll', 'libmmd.dll'):
        z.write(join(r'C:\Program Files (x86)\Intel\ComposerXE-2011',
                     r'redist\ia32\compiler', fn),
                'EGG-INFO/prefix/DLLs/' + fn)

    z.writestr('scipy/__config__.py', config_txt)
    z.writestr('scipy/version.py', version_txt)
    z.writestr('EGG-INFO/spec/depend', spec_txt)
    z.close()


if __name__ == '__main__':
    build_egg()
