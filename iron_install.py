# This file performs the installation step once the build is complete.
# Installation primarily involves copying the build results to the
# IronPython site-packages directory.

import os
import sys
import shutil
import tempfile
from os.path import dirname, isdir, isfile, join

src_dir = join(os.getcwd(), "scipy")

def install():
    print "INSTALLING ..."
    sp_dir = join(sys.prefix, r'Lib\site-packages')
    dll_dir = join(sys.prefix, 'DLLs')
    if not isdir(dll_dir):
        os.mkdir(dll_dir)

    ignore_pys = ["setup.py", "iron_install.py"]
    ignore_libs = ["Microsoft.Scripting.dll",
                   "Microsoft.Scripting.Metadata.dll",
                   "Microsoft.Dynamic.dll",
                   "IronPython.dll",
                   "IronPython.Modules.dll",
                   "NumpyDotNet.dll",
                   "NpyAccessLib.dll",
                   "ndarray.dll"]

    # Recursively walk the directory tree and copy all .py files into the
    # site-packages directory and all .dll files into DLLs.
    for root, dirs, files in os.walk("."):
        for fn in files:
            rel_path = join(root, fn)
            if fn.endswith('.py') and fn not in ignore_pys or fn.endswith('.npz'):
                dst_dir = dirname(join(sp_dir, rel_path))
                if not isdir(dst_dir):
                     os.makedirs(dst_dir)

                # Rename the _clr.py files to remove the _clr suffix.
                # Only used for IronPython.
                if fn.endswith('_clr.py'):
                    dst_file = join(dst_dir, fn[:-7] + ".py")
                else:
                    dst_file = join(dst_dir, fn)

                #print "Copy %s to %s" % (rel_path, dst_file)
                shutil.copy(rel_path, dst_file)
            elif fn.endswith('.dll') and fn not in ignore_libs:
                dst_file = join(dll_dir, fn)
                if isfile(dst_file):
                    # Rename existing file because it is probably in use
                    # by the ipy command.
                    tmp_dir = tempfile.mkdtemp()
                    os.rename(dst_file, join(tmp_dir, fn))
                #print "Copy %s to %s" % (rel_path, dst_file)
                shutil.copy(rel_path, dst_file)

    write_config(join(sp_dir, r'scipy\__config__.py'))
    write_version(join(sp_dir, r'scipy\version.py'))


def write_config(path):
    fo = open(path, 'w')
    fo.write("""# this file is generated by ironsetup.py
# It contains system_info results at the time of building this package.
__all__ = ["get_info","show"]

umfpack_info={}
lapack_opt_info={'extra_link_args': []}
blas_opt_info={'extra_link_args': []}

def get_info(name):
    g = globals()
    return g.get(name, g.get(name + "_info", {}))

def show():
    for name,info_dict in globals().items():
        if name[0] == "_" or type(info_dict) is not type({}): continue
        print(name + ":")
        if not info_dict:
            print("  NOT AVAILABLE")
        for k,v in info_dict.items():
            v = str(v)
            if k == "sources" and len(v) > 200:
                v = v[:60] + " ...\\n... " + v[-60:]
            print("    %s = %s" % (k,v))
""")
    fo.close()


def write_version(path):
    fo = open(path, 'w')
    fo.write("""# this file is generated by ironsetup.py
version = '0.7.0'
release = False

if not release:
    version += ".dev"
""")
    fo.close()


if __name__ == '__main__':
    install()
